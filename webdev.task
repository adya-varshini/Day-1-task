----------------------------WEB DEVELOPER TASK-------------------------------------------------------
mkdir mentor-student-api
cd mentor-student-api
npm init -y
npm install express mongoose body-parser
-->index.js
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const app = express();
const port = 3000;


mongoose.connect('mongodb://localhost:27017/mentor-student', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});


const mentorSchema = new mongoose.Schema({
  name: String,
  students: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Student' }],
});

const studentSchema = new mongoose.Schema({
  name: String,
  mentor: { type: mongoose.Schema.Types.ObjectId, ref: 'Mentor' },
  previousMentors: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Mentor' }],
});

const Mentor = mongoose.model('Mentor', mentorSchema);
const Student = mongoose.model('Student', studentSchema);


app.use(bodyParser.json());

app.post('/mentors', async (req, res) => {
  const mentor = new Mentor(req.body);
  await mentor.save();
  res.send(mentor);
});


app.post('/students', async (req, res) => {
  const student = new Student(req.body);
  await student.save();
  res.send(student);
});


app.post('/mentors/:mentorId/students', async (req, res) => {
  const { mentorId } = req.params;
  const { studentIds } = req.body;

  const mentor = await Mentor.findById(mentorId);
  const students = await Student.find({ _id: { $in: studentIds } });

  students.forEach(student => {
    student.mentor = mentor._id;
    mentor.students.push(student._id);
    student.save();
  });

  await mentor.save();
  res.send(mentor);
});


app.put('/students/:studentId/mentor', async (req, res) => {
  const { studentId } = req.params;
  const { mentorId } = req.body;

  const student = await Student.findById(studentId);
  const newMentor = await Mentor.findById(mentorId);
  const oldMentor = await Mentor.findById(student.mentor);

 
  student.previousMentors.push(student.mentor);
  student.mentor = newMentor._id;

 
  if (oldMentor) {
    oldMentor.students.pull(student._id);
    await oldMentor.save();
  }

  newMentor.students.push(student._id);
  await newMentor.save();

  await student.save();
  res.send(student);
});


app.get('/mentors/:mentorId/students', async (req, res) => {
  const { mentorId } = req.params;
  const mentor = await Mentor.findById(mentorId).populate('students');
  res.send(mentor.students);
});


app.get('/students/:studentId/previous-mentors', async (req, res) => {
  const { studentId } = req.params;
  const student = await Student.findById(studentId).populate('previousMentors');
  res.send(student.previousMentors);
});


app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
--------------------------------------------------------------------
mongod
node index.js

